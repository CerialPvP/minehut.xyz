{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport matter from \"gray-matter\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nconst glob = require(\"glob\");\n\nconst useStyles = makeStyles({\n  root: {\n    fontSize: \"18px\",\n    \"& a\": {\n      color: \"#00aaff\",\n      \"text-decoration\": \"none\"\n    },\n    \"& table\": {\n      \"border-spacing\": \"5px\"\n    },\n    \"& th\": {\n      \"border-bottom\": \"3px solid white\"\n    }\n  }\n});\nexport default function BlogTemplate({\n  frontmatter,\n  markdownBody,\n  siteTitle\n}) {\n  function reformatDate(fullDate) {\n    const date = new Date(fullDate);\n    return date.toDateString().slice(4);\n  }\n\n  const classes = useStyles();\n  /*\r\n   ** Odd fix to get build to run\r\n   ** It seems like on first go the props\r\n   ** are undefined â€” could be a Next bug?\r\n   */\n\n  if (!frontmatter) return /*#__PURE__*/_jsx(_Fragment, {});\n  return /*#__PURE__*/_jsx(Container, {\n    maxWidth: \"md\",\n    children: /*#__PURE__*/_jsx(ReactMarkdown, {\n      className: classes.root,\n      plugins: [gfm],\n      source: markdownBody\n    })\n  });\n}\nexport async function getStaticProps(_ref) {\n  let ctx = Object.assign({}, _ref);\n  let {\n    slug\n  } = ctx.params;\n  if (Array.isArray(slug)) slug = slug.join(\"/\");\n  const content = await import(`../posts/${slug}.md`);\n  const config = await import(`../data/config.json`);\n  const data = matter(content.default);\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content\n    }\n  };\n}\nexport async function getStaticPaths() {\n  //get all .md files in the posts dir\n  const blogs = glob.sync(\"posts/**/*.md\"); //remove path and extension to leave filename only\n\n  const blogSlugs = blogs.map(file => {\n    const f = file.split(\"/\").slice(1, file.split(\"/\").length).join(\"/\").replace(/ /g, \"-\").slice(0, -3).trim(); //console.log(file, f);\n\n    return f;\n  }); // create paths with `slug` param\n\n  const paths = blogSlugs.map(slug => `/${slug}`);\n  return {\n    paths,\n    fallback: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}